plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = 'Hyperlink'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }

    flatDir {
        dirs 'build/libs'
    }

    mavenLocal()
    maven { url "https://cursemaven.com"}
    maven {
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { url 'https://modmaven.dev/' }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf('com.sakurafuld.hyperdaimc:BetterTags:1.20.1-1.4')

    compileOnly fg.deobf("maven.modrinth:FKhAAkIk:1.3")
    compileOnly fg.deobf("maven.modrinth:Ec1dswXy:1.7.2")
    compileOnly fg.deobf("maven.modrinth:x9IdN1s2:1.20.1-2.6.1")
    compileOnly fg.deobf("maven.modrinth:6hI5AK5F:0.3.3.3")
    implementation fg.deobf("curse.maven:attributefix-280510:4911084")
    implementation fg.deobf("curse.maven:geckolib-388172:6333474")

    implementation fg.deobf("curse.maven:embeddium-908741:5681725")
    implementation fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    implementation fg.deobf("curse.maven:jade-324717:6271651")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:5.14.1+1.20.1")
    implementation fg.deobf("curse.maven:cyclops-core-232758:6491014")
    implementation fg.deobf("curse.maven:common-capabilities-247007:6514954")
    implementation fg.deobf("curse.maven:lionfish-api-1001614:5922047")
    implementation fg.deobf("curse.maven:playeranimator-658587:4587214")
    implementation fg.deobf("curse.maven:moffs-addonapi-dynload-1242459:6420515")
    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
    implementation fg.deobf("curse.maven:brandons-core-231382:5422013")
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:5753868")
    implementation fg.deobf("curse.maven:citadel-331936:6002521")
    implementation fg.deobf("curse.maven:event-wrapper-1256971:6553656")
    implementation fg.deobf("curse.maven:playeranimator-658587:4587214")
    implementation fg.deobf("curse.maven:yacl-667299:6336646")
    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_build}")
    implementation fg.deobf("curse.maven:kotlin-for-forge-351264:5402061")
    implementation fg.deobf("curse.maven:cloth-config-348521:5729105")
    implementation fg.deobf("curse.maven:carbon-config-898104:6540092")

    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools
    compileOnly fg.deobf("curse.maven:compact-void-miners-395607:5109833")

    compileOnly fg.deobf("curse.maven:integrated-dynamics-236307:6550603")
    compileOnly fg.deobf("curse.maven:integrated-tunnels-251389:6363126")

    implementation fg.deobf("curse.maven:lendercataclysm-551586:6501448")

    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinkers_build}")
    implementation fg.deobf("curse.maven:ticex-tinkers-construct-ex-1242469:6866978")

    implementation fg.deobf("curse.maven:slashblade-resharped-1022428:6845813")

    implementation fg.deobf("curse.maven:re-avaritia-623969:6418092")

    implementation fg.deobf("curse.maven:draconic-evolution-223565:6793843")

    implementation fg.deobf("curse.maven:botania-225643:6366547")
    implementation fg.deobf("curse.maven:extrabotany-reburn-1271869:6577564")

    compileOnly fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:6142963")

    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")

    implementation fg.deobf("curse.maven:timeless-and-classics-zero-1028108:6654541")

    compileOnly fg.deobf("curse.maven:guideme-1173950:6634593")
    compileOnly fg.deobf("curse.maven:applied-energistics-2-223794:6629570")
    compileOnly fg.deobf("curse.maven:ae2-things-forge-609977:4616683")
    compileOnly fg.deobf("curse.maven:mega-cells-622112:6175008")
    compileOnly fg.deobf("curse.maven:ae2-mega-things-1150075:6203824")

    implementation fg.deobf("curse.maven:chunkpregenerator-267193:5518264")
    implementation fg.deobf("curse.maven:deuf-duplicate-entity-uuid-fix-296646:4598640")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}



// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}
mixin {
    add sourceSets.main, 'hyperdaimc.refmap.json'
    config 'hyperdaimc.mixins.json'
    debug.verbose = true
    debug.export = true
}
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}



